user  root;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
	#include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

	#gzip  on;
	# 设置lua包路径(';;'是默认路径，?.dylib是macos上的库，?.so是centos上的库):
	lua_package_path '/data2/luaapp/framework/libs/?.lua;/data2/luaapp/framework/system/?.lua;;';
	lua_package_cpath '/data2/luaapp/framework/libs/?.so;/run/openresty/lualib/?.so;;';

	#共享内存
	lua_shared_dict cache 128m;

	#framework初始化
	init_by_lua_file '/data2/luaapp/framework/run/init.lua';

	#设置成一样避免获取request_body时可能会缓存到临时文件
	#client_max_body_size 50m;
	#client_body_buffer_size 50m;

	server {
        listen       8001;
		#关闭后不用重启nginx即可访问最新代码，生产环境一定要打开
		lua_code_cache off;
        server_name  localhost;
		#framework路径
		set $FRAMEWORK_PATH '/data2/luaapp/framework';
		#应用名称
		set $APP_NAME 'app';
		#应用路径
		set $APP_PATH '/data2/luaapp/app';
		#应用使用的配置，可区分开发/生产环境，默认使用app.lua
		set $APP_CONFIG '/config/app.lua';
		#访问日志
		access_log  '/data2/logs/app/access.log' main;
		#错误/输出日志
		error_log   '/data2/logs/app/error.log'  info;
		location / {
			default_type text/html;
			content_by_lua_file '${FRAMEWORK_PATH}/run/content.lua';
		}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
